// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$conversation-name: 'conversation';
$conversation-x: 0px;
$conversation-y: 34px;
$conversation-offset-x: 0px;
$conversation-offset-y: -34px;
$conversation-width: 32px;
$conversation-height: 32px;
$conversation-total-width: 107px;
$conversation-total-height: 66px;
$conversation-image: 'sprites.png';
$conversation: (0px, 34px, 0px, -34px, 32px, 32px, 107px, 66px, 'sprites.png', 'conversation', );
$fb-name: 'fb';
$fb-x: 34px;
$fb-y: 34px;
$fb-offset-x: -34px;
$fb-offset-y: -34px;
$fb-width: 32px;
$fb-height: 32px;
$fb-total-width: 107px;
$fb-total-height: 66px;
$fb-image: 'sprites.png';
$fb: (34px, 34px, -34px, -34px, 32px, 32px, 107px, 66px, 'sprites.png', 'fb', );
$heart-name: 'heart';
$heart-x: 0px;
$heart-y: 0px;
$heart-offset-x: 0px;
$heart-offset-y: 0px;
$heart-width: 36px;
$heart-height: 32px;
$heart-total-width: 107px;
$heart-total-height: 66px;
$heart-image: 'sprites.png';
$heart: (0px, 0px, 0px, 0px, 36px, 32px, 107px, 66px, 'sprites.png', 'heart', );
$siren-name: 'siren';
$siren-x: 38px;
$siren-y: 0px;
$siren-offset-x: -38px;
$siren-offset-y: 0px;
$siren-width: 35px;
$siren-height: 32px;
$siren-total-width: 107px;
$siren-total-height: 66px;
$siren-image: 'sprites.png';
$siren: (38px, 0px, -38px, 0px, 35px, 32px, 107px, 66px, 'sprites.png', 'siren', );
$tablets-name: 'tablets';
$tablets-x: 75px;
$tablets-y: 0px;
$tablets-offset-x: -75px;
$tablets-offset-y: 0px;
$tablets-width: 32px;
$tablets-height: 32px;
$tablets-total-width: 107px;
$tablets-total-height: 66px;
$tablets-image: 'sprites.png';
$tablets: (75px, 0px, -75px, 0px, 32px, 32px, 107px, 66px, 'sprites.png', 'tablets', );
$watch-name: 'watch';
$watch-x: 75px;
$watch-y: 34px;
$watch-offset-x: -75px;
$watch-offset-y: -34px;
$watch-width: 23px;
$watch-height: 32px;
$watch-total-width: 107px;
$watch-total-height: 66px;
$watch-image: 'sprites.png';
$watch: (75px, 34px, -75px, -34px, 23px, 32px, 107px, 66px, 'sprites.png', 'watch', );
$spritesheet-width: 107px;
$spritesheet-height: 66px;
$spritesheet-image: 'sprites.png';
$spritesheet-sprites: ($conversation, $fb, $heart, $siren, $tablets, $watch, );
$spritesheet: (107px, 66px, 'sprites.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
